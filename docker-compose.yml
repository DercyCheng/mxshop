version: '3.8'

services:
  # 基础设施服务
  mysql:
    image: mysql:8.0
    container_name: shop_mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: shop
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - shop_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2-alpine
    container_name: shop_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - shop_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:7.14.0
    container_name: shop_es
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - shop_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 3

  rocketmq-namesrv:
    image: apache/rocketmq:4.9.3
    container_name: shop_rocketmq_namesrv
    command: sh mqnamesrv
    ports:
      - "9876:9876"
    volumes:
      - rocketmq_namesrv_logs:/home/rocketmq/logs
    networks:
      - shop_net

  rocketmq-broker:
    image: apache/rocketmq:4.9.3
    container_name: shop_rocketmq_broker
    command: sh mqbroker -n rocketmq-namesrv:9876
    depends_on:
      - rocketmq-namesrv
    ports:
      - "10909:10909"
      - "10911:10911"
    volumes:
      - rocketmq_broker_logs:/home/rocketmq/logs
      - rocketmq_broker_data:/home/rocketmq/store
    networks:
      - shop_net

  consul:
    image: consul:1.10.4
    container_name: shop_consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    volumes:
      - consul_data:/consul/data
    networks:
      - shop_net
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 5s
      timeout: 5s
      retries: 3

  nacos:
    image: nacos/nacos-server:v2.0.3
    container_name: shop_nacos
    environment:
      - MODE=standalone
      - PREFER_HOST_MODE=hostname
      - NACOS_AUTH_ENABLE=true
      - NACOS_AUTH_TOKEN_EXPIRE_SECONDS=18000
      - NACOS_AUTH_TOKEN=SecretKey012345678901234567890123456789012345678901234567890123456789
      - JVM_XMS=512m
      - JVM_XMX=512m
    ports:
      - "8848:8848"
      - "9848:9848"
    volumes:
      - nacos_data:/home/nacos/data
      - nacos_logs:/home/nacos/logs
    networks:
      - shop_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8848/nacos/"]
      interval: 5s
      timeout: 5s
      retries: 10

  jaeger:
    image: jaegertracing/all-in-one:1.29
    container_name: shop_jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - shop_net

  # 添加Nginx作为API网关和静态资源服务器
  nginx:
    image: nginx:1.21-alpine
    container_name: shop_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/conf.d:/etc/nginx/conf.d
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deploy/nginx/ssl:/etc/nginx/ssl
      - ./deploy/nginx/html:/usr/share/nginx/html
    depends_on:
      - user-web
      - goods-web
      - order-web
      - userop-web
      - oss-web
    networks:
      - shop_net
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 服务层 (SRV)
  user-srv:
    build:
      context: ./shop_srv/user_srv
      dockerfile: ../../Dockerfile
      args:
        SERVICE_PATH: cmd/server/main.go
        SERVICE_NAME: user-srv
    image: shop/user-srv:latest
    container_name: shop_user_srv
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./shop_srv/user_srv/config-pro.yaml:/app/config-pro.yaml
    depends_on:
      mysql:
        condition: service_healthy
      consul:
        condition: service_healthy
      nacos:
        condition: service_healthy
    networks:
      - shop_net
    restart: always

  goods-srv:
    build:
      context: ./shop_srv/goods_srv
      dockerfile: ../../Dockerfile
      args:
        SERVICE_PATH: cmd/server/main.go
        SERVICE_NAME: goods-srv
    image: shop/goods-srv:latest
    container_name: shop_goods_srv
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./shop_srv/goods_srv/config-pro.yaml:/app/config-pro.yaml
    depends_on:
      mysql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      consul:
        condition: service_healthy
      nacos:
        condition: service_healthy
    networks:
      - shop_net
    restart: always

  inventory-srv:
    build:
      context: ./shop_srv/inventory_srv
      dockerfile: ../../Dockerfile
      args:
        SERVICE_PATH: cmd/server/main.go
        SERVICE_NAME: inventory-srv
    image: shop/inventory-srv:latest
    container_name: shop_inventory_srv
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./shop_srv/inventory_srv/config-pro.yaml:/app/config-pro.yaml
    depends_on:
      mysql:
        condition: service_healthy
      consul:
        condition: service_healthy
      nacos:
        condition: service_healthy
    networks:
      - shop_net
    restart: always

  order-srv:
    build:
      context: ./shop_srv/order_srv
      dockerfile: ../../Dockerfile
      args:
        SERVICE_PATH: cmd/server/main.go
        SERVICE_NAME: order-srv
    image: shop/order-srv:latest
    container_name: shop_order_srv
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./shop_srv/order_srv/config-pro.yaml:/app/config-pro.yaml
    depends_on:
      mysql:
        condition: service_healthy
      consul:
        condition: service_healthy
      nacos:
        condition: service_healthy
      rocketmq-broker:
        condition: service_started
    networks:
      - shop_net
    restart: always

  userop-srv:
    build:
      context: ./shop_srv/userop_srv
      dockerfile: ../../Dockerfile
      args:
        SERVICE_PATH: cmd/server/main.go
        SERVICE_NAME: userop-srv
    image: shop/userop-srv:latest
    container_name: shop_userop_srv
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./shop_srv/userop_srv/config-pro.yaml:/app/config-pro.yaml
    depends_on:
      mysql:
        condition: service_healthy
      consul:
        condition: service_healthy
      nacos:
        condition: service_healthy
    networks:
      - shop_net
    restart: always

  # API层 (Web)
  user-web:
    build:
      context: ./shop_web/user-web
      dockerfile: ../../Dockerfile
      args:
        SERVICE_PATH: main.go
        SERVICE_NAME: user-web
    image: shop/user-web:latest
    container_name: shop_user_web
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./shop_web/user-web/config-pro.yaml:/app/config-pro.yaml
    depends_on:
      - user-srv
    ports:
      - "8021:8080"
    networks:
      - shop_net
    restart: always

  goods-web:
    build:
      context: ./shop_web/goods-web
      dockerfile: ../../Dockerfile
      args:
        SERVICE_PATH: main.go
        SERVICE_NAME: goods-web
    image: shop/goods-web:latest
    container_name: shop_goods_web
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./shop_web/goods-web/config-pro.yaml:/app/config-pro.yaml
    depends_on:
      - goods-srv
    ports:
      - "8022:8080"
    networks:
      - shop_net
    restart: always

  order-web:
    build:
      context: ./shop_web/order-web
      dockerfile: ../../Dockerfile
      args:
        SERVICE_PATH: main.go
        SERVICE_NAME: order-web
    image: shop/order-web:latest
    container_name: shop_order_web
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./shop_web/order-web/config-pro.yaml:/app/config-pro.yaml
    depends_on:
      - order-srv
    ports:
      - "8023:8080"
    networks:
      - shop_net
    restart: always

  userop-web:
    build:
      context: ./shop_web/userop-web
      dockerfile: ../../Dockerfile
      args:
        SERVICE_PATH: main.go
        SERVICE_NAME: userop-web
    image: shop/userop-web:latest
    container_name: shop_userop_web
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./shop_web/userop-web/config-pro.yaml:/app/config-pro.yaml
    depends_on:
      - userop-srv
    ports:
      - "8024:8080"
    networks:
      - shop_net
    restart: always

  oss-web:
    build:
      context: ./shop_web/oss-web
      dockerfile: ../../Dockerfile
      args:
        SERVICE_PATH: main.go
        SERVICE_NAME: oss-web
    image: shop/oss-web:latest
    container_name: shop_oss_web
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./shop_web/oss-web/config-pro.yaml:/app/config-pro.yaml
      - oss_data:/app/static
    ports:
      - "8029:8080"
    networks:
      - shop_net
    restart: always

networks:
  shop_net:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  es_data:
  rocketmq_namesrv_logs:
  rocketmq_broker_logs:
  rocketmq_broker_data:
  consul_data:
  nacos_data:
  nacos_logs:
  oss_data: